-- MySQL Script generated by MySQL Workbench
-- Sun May  6 15:16:08 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema cienpor3_volantes_sistema
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema cienpor3_volantes_sistema
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `cienpor3_volantes_sistema` DEFAULT CHARACTER SET utf8 ;
USE `cienpor3_volantes_sistema` ;

-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`users` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(250) NOT NULL,
  `email` VARCHAR(255) NOT NULL,
  `password` LONGTEXT NOT NULL,
  `actived` TINYINT NULL DEFAULT 1,
  `type` INT NOT NULL COMMENT '1: Administrador\n2: Diseñador: podrá ver solo la sección de diseños\n3: Vendedor Nuevos: podrá ver solo la sección de nuevos clientes\n4: Vendedor clientes: podrá ver las secciones de CF, nuevo pedido o nuevo cliente\n5: Estregas: ',
  `remember_token` LONGTEXT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  PRIMARY KEY (`id`));


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`clients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`clients` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(80) NOT NULL,
  `charge` VARCHAR(150) NOT NULL,
  `address` VARCHAR(200) NOT NULL,
  `name_contact` VARCHAR(100) NOT NULL,
  `reference` VARCHAR(250) NULL,
  `observations` LONGTEXT NULL,
  `comments` LONGTEXT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_clients_user1_idx` (`user_id` ASC),
  CONSTRAINT `fk_clients_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `cienpor3_volantes_sistema`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`phones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`phones` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `number` VARCHAR(18) NOT NULL,
  `explanatory` VARCHAR(150) NOT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_phones_clients1_idx` (`client_id` ASC),
  CONSTRAINT `fk_phones_clients1`
    FOREIGN KEY (`client_id`)
    REFERENCES `cienpor3_volantes_sistema`.`clients` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`emails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`emails` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `email` LONGTEXT NOT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_emails_clients1_idx` (`client_id` ASC),
  CONSTRAINT `fk_emails_clients1`
    FOREIGN KEY (`client_id`)
    REFERENCES `cienpor3_volantes_sistema`.`clients` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`branchs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`branchs` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `name` VARCHAR(100) NOT NULL,
  `address` LONGTEXT NULL,
  `phone` VARCHAR(45) NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `client_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_comments_clients1_idx` (`client_id` ASC),
  CONSTRAINT `fk_comments_clients100`
    FOREIGN KEY (`client_id`)
    REFERENCES `cienpor3_volantes_sistema`.`clients` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`orders` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `product` VARCHAR(50) NOT NULL,
  `size` VARCHAR(15) NOT NULL,
  `size_special` TINYINT NULL DEFAULT 0,
  `quantity` INT NOT NULL,
  `spaces` FLOAT NOT NULL,
  `time_delivery` INT NOT NULL COMMENT 'Es el tiempo en el que estara listo el pedido una vez se apruebe el diseño\nExpresado en dias, ej: 2 semanas = 14 dias, 1 semana = 7 dias',
  `date_delivery` DATE NULL COMMENT 'Una vez aprobado el dieño este campo se completara añadiendo a la fecha actual el time_delivery',
  `special_time` TINYINT NULL DEFAULT 0,
  `sides` INT NOT NULL COMMENT '1: Un lado solo, el otro en blanco\n2: Dos lados diferentes\n3: Dos lados iguales\n',
  `garnet` VARCHAR(15) NOT NULL,
  `design` INT NOT NULL COMMENT '1: nuevo diseño\n2: corrección\n3: mismo diseño que la ultima vez\n4: envía el cliente',
  `contact_design` VARCHAR(150) NOT NULL,
  `specification` LONGTEXT NULL,
  `we_send` TINYINT NULL DEFAULT 0,
  `description_send` VARCHAR(100) NOT NULL,
  `price_flyer` FLOAT NULL,
  `price_flyer_special` TINYINT NULL DEFAULT 0,
  `price_design` FLOAT NULL,
  `price_send` FLOAT NULL,
  `trace` FLOAT NULL,
  `debit` FLOAT NULL,
  `method_payment` VARCHAR(45) NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `branch_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_order_branchs1_idx` (`branch_id` ASC),
  CONSTRAINT `fk_order_branchs1`
    FOREIGN KEY (`branch_id`)
    REFERENCES `cienpor3_volantes_sistema`.`branchs` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`status_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`status_order` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `status` INT NOT NULL COMMENT '1: Venta\n2: Diseño\n3: Impresión\n4: Taller\n5: Entrega\n6: Terminado\n7: Deudor\n8: Cancelado',
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `user_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_status_order_users1_idx` (`user_id` ASC),
  INDEX `fk_status_order_order1_idx` (`order_id` ASC),
  CONSTRAINT `fk_status_order_users1`
    FOREIGN KEY (`user_id`)
    REFERENCES `cienpor3_volantes_sistema`.`users` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_status_order_order1`
    FOREIGN KEY (`order_id`)
    REFERENCES `cienpor3_volantes_sistema`.`orders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`measures`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`measures` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `measure` VARCHAR(10) NOT NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `measure_UNIQUE` (`measure` ASC));


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`prices`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`prices` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `garnet` VARCHAR(45) NOT NULL,
  `time` INT NOT NULL COMMENT '1: 1 semana\n2: 3 semana',
  `price1` FLOAT NULL COMMENT 'quantity 5000',
  `price2` FLOAT NULL COMMENT 'quantity 10000',
  `price3` FLOAT NULL COMMENT 'quantity 15000',
  `price4` FLOAT NULL COMMENT 'quantity 20000',
  `updated_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `measure_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_prices_measures1_idx` (`measure_id` ASC),
  CONSTRAINT `fk_prices_measures1`
    FOREIGN KEY (`measure_id`)
    REFERENCES `cienpor3_volantes_sistema`.`measures` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`status_design`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`status_design` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `design` TINYINT NOT NULL DEFAULT 0,
  `send1` TINYINT NOT NULL DEFAULT 0,
  `send2` TINYINT NOT NULL DEFAULT 0,
  `send3` TINYINT NOT NULL DEFAULT 0,
  `send4` TINYINT NOT NULL DEFAULT 0,
  `send5` TINYINT NOT NULL DEFAULT 0,
  `correction1` TINYINT NOT NULL DEFAULT 0,
  `correction2` TINYINT NOT NULL DEFAULT 0,
  `correction3` TINYINT NOT NULL DEFAULT 0,
  `correction4` TINYINT NOT NULL DEFAULT 0,
  `correction5` TINYINT NOT NULL DEFAULT 0,
  `approved` TINYINT NOT NULL DEFAULT 0,
  `finish` TINYINT NOT NULL DEFAULT 0,
  `responsibility` TINYINT NOT NULL DEFAULT 0,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_status_design_orders1_idx` (`order_id` ASC),
  CONSTRAINT `fk_status_design_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `cienpor3_volantes_sistema`.`orders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`folios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`folios` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `ready` TINYINT NOT NULL DEFAULT 0,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  PRIMARY KEY (`id`));


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`order_folio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`order_folio` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `spaces` FLOAT NOT NULL,
  `folio_id` INT NOT NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_order_imprent_folio1_idx` (`folio_id` ASC),
  INDEX `fk_order_imprent_orders1_idx` (`order_id` ASC),
  CONSTRAINT `fk_order_imprent_folio1`
    FOREIGN KEY (`folio_id`)
    REFERENCES `cienpor3_volantes_sistema`.`folios` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_order_imprent_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `cienpor3_volantes_sistema`.`orders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


-- -----------------------------------------------------
-- Table `cienpor3_volantes_sistema`.`abonos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `cienpor3_volantes_sistema`.`abonos` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `mount` FLOAT NOT NULL DEFAULT 0,
  `method_payment` VARCHAR(45) NULL,
  `created_at` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP NULL,
  `order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_abonos_orders1_idx` (`order_id` ASC),
  CONSTRAINT `fk_abonos_orders1`
    FOREIGN KEY (`order_id`)
    REFERENCES `cienpor3_volantes_sistema`.`orders` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Trigers
-- -----------------------------------------------------

DROP TRIGGER IF EXISTS `update_users`;
CREATE TRIGGER update_users BEFORE UPDATE 
    ON `users` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_users`;
CREATE TRIGGER insert_users BEFORE INSERT 
    ON `users` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_prices`;
CREATE TRIGGER update_prices BEFORE UPDATE 
    ON `prices` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_prices`;
CREATE TRIGGER insert_prices BEFORE INSERT 
    ON `prices` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_measures`;
CREATE TRIGGER update_measures BEFORE UPDATE 
    ON `measures` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_measures`;
CREATE TRIGGER insert_measures BEFORE INSERT 
    ON `measures` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_emails`;
CREATE TRIGGER update_emails BEFORE UPDATE 
    ON `emails` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_emails`;
CREATE TRIGGER insert_emails BEFORE INSERT 
    ON `emails` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_phones`;
CREATE TRIGGER update_phones BEFORE UPDATE 
    ON `phones` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_phones`;
CREATE TRIGGER insert_phones BEFORE INSERT 
    ON `phones` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_clients`;
CREATE TRIGGER update_clients BEFORE UPDATE 
    ON `clients` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_clients`;
CREATE TRIGGER insert_clients BEFORE INSERT 
    ON `clients` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_branchs`;
CREATE TRIGGER update_branchs BEFORE UPDATE 
    ON `branchs` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_branchs`;
CREATE TRIGGER insert_branchs BEFORE INSERT 
    ON `branchs` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_order_folio`;
CREATE TRIGGER update_order_folio BEFORE UPDATE 
    ON `order_folio` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_order_folio`;
CREATE TRIGGER insert_order_folio BEFORE INSERT 
    ON `order_folio` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_folios`;
CREATE TRIGGER update_folios BEFORE UPDATE 
    ON `folios` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_folios`;
CREATE TRIGGER insert_folios BEFORE INSERT 
    ON `folios` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_abonos`;
CREATE TRIGGER update_abonos BEFORE UPDATE 
    ON `abonos` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_abonos`;
CREATE TRIGGER insert_abonos BEFORE INSERT 
    ON `abonos` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_orders`;
CREATE TRIGGER update_orders BEFORE UPDATE 
    ON `orders` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_orders`;
CREATE TRIGGER insert_orders BEFORE INSERT 
    ON `orders` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_abonos`;
CREATE TRIGGER update_abonos BEFORE UPDATE 
    ON `abonos` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_abonos`;
CREATE TRIGGER insert_abonos BEFORE INSERT 
    ON `abonos` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_status_design`;
CREATE TRIGGER update_status_design BEFORE UPDATE 
    ON `status_design` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_status_design`;
CREATE TRIGGER insert_status_design BEFORE INSERT 
    ON `status_design` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `update_status_order`;
CREATE TRIGGER update_status_order BEFORE UPDATE 
    ON `status_order` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;
DROP TRIGGER IF EXISTS `insert_status_order`;
CREATE TRIGGER insert_status_order BEFORE INSERT 
    ON `status_order` FOR EACH ROW SET NEW.updated_at = CURRENT_TIMESTAMP;


-- -----------------------------------------------------
-- Data
-- -----------------------------------------------------

INSERT INTO `users` VALUES (1,'root','root@volantes.com','$2y$10$SgGsJfbZwrB0zOAIFE39IO3fR6ur.utblA58fPpfI0Mrf.dV4Hgem',1,NULL,'2018-04-05 23:26:12','2018-04-05 20:26:12');
INSERT INTO `measures` VALUES (1,'10x7.5','2018-04-05 23:26:12','2018-04-05 20:26:12'),(2,'10x15','2018-04-05 23:26:12','2018-04-05 20:26:12'),(3,'20x15','2018-04-05 23:26:13','2018-04-05 20:26:13'),(4,'20x30','2018-04-05 23:26:13','2018-04-05 20:26:13');
